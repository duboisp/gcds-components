{"file":"gcds-card.entry.esm.js","mappings":"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","names":["i18n"],"sources":["src/components/gcds-card/i18n/i18n.js","src/components/gcds-card/gcds-card.css?tag=gcds-card&encapsulation=shadow","src/components/gcds-card/gcds-card.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    tagged: 'Tagged:',\n    badgeError: 'gcds-card: The badge attribute has a character limit of 20 characters.',\n  },\n  fr: {\n    tagged: 'Baliser :',\n    badgeError: 'gcds-card: L\\'attribut badge a une limite de caractères de 20 caractères.',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, link, hover, focus;@layer reset{:host{display:block}:host *{box-sizing:border-box;margin:0;padding:0}:host slot{display:initial}}@layer default{:host .gcds-card{background-color:var(--gcds-card-background-color);box-shadow:var(--gcds-card-box-shadow);color:var(--gcds-card-color);display:block;height:100%;max-width:var(--gcds-card-max-width);overflow:hidden;padding:var(--gcds-card-padding);position:relative}:host .gcds-card .gcds-badge{background-color:var(--gcds-card-badge-background-color);left:0;padding:var(--gcds-card-badge-padding);position:absolute;top:0;text-wrap:nowrap}:host .gcds-card .gcds-card__image{margin:var(--gcds-card-image-margin);width:100%}:host .gcds-card .gcds-card__title{font:var(--gcds-card-title-font-desktop);width:fit-content}@media only screen and (width < 48em){:host .gcds-card .gcds-card__title{font:var(--gcds-card-title-font-mobile)}}:host .gcds-card .gcds-card__title:has(+.gcds-card__description){margin:var(--gcds-card-title-margin)}:host .gcds-card .gcds-card__description{--gcds-text-size-body-desktop:var(--gcds-card-description-font-desktop)}@media only screen and (width < 48em){:host .gcds-card .gcds-card__description{font:var(--gcds-card-description-font-mobile)}}}@layer link{:host .gcds-card gcds-link::part(link):after{bottom:0;content:\"\";left:0;pointer-events:auto;position:absolute;right:0;top:0;z-index:1}}@layer hover{@media (hover:hover){:host .gcds-card:hover{background-color:var(--gcds-card-hover-background-color);box-shadow:var(--gcds-card-hover-box-shadow);cursor:pointer}}}@layer focus{:host .gcds-card:has(:focus-within){box-shadow:var(--gcds-card-focus-box-shadow);outline:var(--gcds-card-focus-outline);outline-offset:var(--gcds-card-focus-outline-offset)}:host gcds-link::part(link):focus{background-color:var(--gcds-card-focus-link-background-color);border:var(--gcds-card-focus-link-border);box-shadow:var(--gcds-card-focus-link-box-shadow);color:var(--gcds-card-focus-link-color);outline:var(--gcds-card-focus-link-outline);text-decoration:underline currentColor var(--gcds-card-focus-link-text-decoration-thickness)}}","import {\n  Element,\n  Component,\n  Host,\n  Prop,\n  h,\n  State,\n  Event,\n  EventEmitter,\n  Watch,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig, logError } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-card',\n  styleUrl: 'gcds-card.css',\n  shadow: true,\n})\nexport class GcdsCard {\n  @Element() el: HTMLElement;\n\n  /**\n   * The card title attribute specifies the title that appears on the card\n   */\n  @Prop({ reflect: true }) cardTitle!: string;\n  @Watch('cardTitle')\n  validateCardTitle() {\n    if (!this.cardTitle || this.cardTitle.trim() == '') {\n      this.errors.push('cardTitle');\n    } else if (this.errors.includes('cardTitle')) {\n      this.errors.splice(this.errors.indexOf('cardTitle'), 1);\n    }\n  }\n\n  /**\n   * The href attribute specifies the URL of the page the link goes to\n   */\n  @Prop({ reflect: true }) href!: string;\n  @Watch('href')\n  validateHref() {\n    if (!this.href || this.href.trim() == '') {\n      this.errors.push('href');\n    } else if (this.errors.includes('href')) {\n      this.errors.splice(this.errors.indexOf('href'), 1);\n    }\n  }\n\n  /**\n   * The card title tag attribute specifies HTML element the title renders as\n   */\n  @Prop() cardTitleTag: 'h3' | 'h4' | 'h5' | 'h6' | 'a' = 'a';\n\n  /**\n   * The description attribute specifies the body of text that appears on the card\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * The badge attribute specifies the badge text that appears in the top left corner of the card. 20 character limit.\n   */\n  @Prop({ reflect: true, mutable: true }) badge: string;\n  @Watch('badge')\n  validateBadge() {\n    if (this.badge && this.badge.length > 20) {\n      console.error(`${i18n['en'].badgeError} | ${i18n['fr'].badgeError}`);\n      this.errors.push('badge');\n    } else if (this.errors.includes('badge')) {\n      this.errors.splice(this.errors.indexOf('badge'), 1);\n    }\n  }\n\n  /**\n   * The img src attribute specifies the path to the image\n   */\n  @Prop({ reflect: true }) imgSrc: string;\n\n  /**\n   * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative\n   */\n  @Prop({ reflect: true }) imgAlt: string;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the card has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the card loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the card has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateCardTitle();\n    this.validateHref();\n\n    if (this.errors.includes('href') || this.errors.includes('cardTitle')) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateBadge();\n\n    let valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-card', this.errors, ['badge']);\n    }\n  }\n\n  private get renderDescription() {\n    if (this.el.innerHTML.trim() != '') {\n      return <div class=\"gcds-card__description\"><slot></slot></div>;\n    } else if (this.description) {\n      return <div class=\"gcds-card__description\"><gcds-text margin-bottom='0'>{this.description}</gcds-text></div>;\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const {\n      cardTitle,\n      cardTitleTag,\n      href,\n      badge,\n      imgSrc,\n      imgAlt,\n      renderDescription,\n      lang,\n      errors,\n    } = this;\n\n    const Element = cardTitleTag;\n\n    const taggedAttr = {};\n\n    if (badge) {\n      taggedAttr['aria-describedby'] = 'gcds-badge';\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host>\n          <div class=\"gcds-card\">\n            {imgSrc && (\n              <img\n                src={imgSrc}\n                alt={imgAlt ? imgAlt : ''}\n                class=\"gcds-card__image\"\n              />\n            )}\n            {badge && !errors.includes('badge') && (\n              <gcds-text\n                id=\"gcds-badge\"\n                class=\"gcds-badge\"\n                text-role=\"light\"\n                margin-bottom=\"0\"\n                size=\"caption\"\n              >\n                <strong>\n                  <gcds-sr-only>{i18n[lang].tagged}</gcds-sr-only>\n                  {badge}\n                </strong>\n              </gcds-text>\n            )}\n            {Element != 'a' ? (\n              <Element class=\"gcds-card__title\" {...taggedAttr}>\n                <gcds-link href={href}>{cardTitle}</gcds-link>\n              </Element>\n            ) : (\n              <gcds-link href={href} class=\"gcds-card__title\" {...taggedAttr}>\n                {cardTitle}\n              </gcds-link>\n            )}\n            {renderDescription}\n          </div>\n        </Host>\n      );\n    }\n  }\n}\n"],"version":3}