{"file":"gcds-signature.entry.esm.js","mappings":";;;AAAA,MAAM,IAAI,GAAG;AACb,EAAE,EAAE,EAAE;AACN,IAAI,IAAI,EAAE,2BAA2B;AACrC,GAAG;AACH,EAAE,EAAE,EAAE;AACN,IAAI,IAAI,EAAE,2BAA2B;AACrC,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPD,MAAM,gBAAgB,GAAG,6xBAA6xB;;MCczyB,aAAa;;;oBAWtB,WAAW;uBAaX,QAAQ;uBAYkC,KAAK;;;IAtBjD,YAAY,CAAC,QAAgB;QAC3B,IAAI,QAAQ,IAAI,WAAW,IAAI,QAAQ,IAAI,UAAU,EAAE;YACrD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;SACzB;KACF;IASD,eAAe,CAAC,QAAgB;QAC9B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,OAAO,EAAE;YAC/C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;SACzB;KACF;;;;IAeD,UAAU;QACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS;YAC7C,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;gBACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;aAC1B;SACF,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KAC3C;IAED,MAAM,iBAAiB;;QAErB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEpC,IAAI,CAAC,YAAY,CAAC;QAClB,IAAI,CAAC,eAAe,CAAC;QAErB,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAED,IAAY,SAAS;QACnB,QAAQ,IAAI,CAAC,IAAI;YACf,KAAK,UAAU;gBACb,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;oBACrB,OAAO,UAAU,CAAC;iBACnB;qBAAM;oBACL,OAAO,UAAU,CAAC;iBACnB;YACH,KAAK,WAAW,CAAC;YACjB;gBACE,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;oBACrB,OAAO,WAAW,CAAC;iBACpB;qBAAM;oBACL,OAAO,WAAW,CAAC;iBACpB;SACJ;KACF;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QAEhD,QACE,EAAC,IAAI,QACF,OAAO,IAAI,IAAI,KAAK,WAAW;;QAE9B,SACE,KAAK,EAAC,gBAAgB,EACtB,IAAI,EAAEA,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EACrB,SAAS,EAAE,SAAS,GACjB,KAEL,WAAK,KAAK,EAAC,gBAAgB,EAAC,SAAS,EAAE,SAAS,GAAQ,CACzD,CACI,EACP;KACH;;;;;;;;;;;","names":["i18n"],"sources":["src/components/gcds-signature/i18n/i18n.js","src/components/gcds-signature/gcds-signature.css?tag=gcds-signature&encapsulation=shadow","src/components/gcds-signature/gcds-signature.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    link: 'https://canada.ca/en.html',\n  },\n  fr: {\n    link: 'https://canada.ca/fr.html',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, type.signature, type.wordmark, variant.colour, variant.white, desktop;@layer reset{:host{display:block;width:fit-content}}@layer default{:host .gcds-signature{display:flex}:host svg{max-width:100%}:host svg .fip_flag{fill:var(--gcds-signature-color-flag)}}@layer type.signature{:host(:not([type=wordmark])) svg{height:var(--gcds-signature-signature-height)}}@layer type.wordmark{:host([type=wordmark]) svg{height:var(--gcds-signature-wordmark-height);width:auto}}@layer variant.colour{:host(:not([variant=white])) svg .fip_text{fill:var(--gcds-signature-color-text)}}@layer variant.white{:host([variant=white]) svg :is(.fip_text){fill:var(--gcds-signature-white-default)}}@layer desktop{@media screen and (width >= 64em){:host(:not([type=wordmark])) svg{height:2.125rem}}}","import { Component, Host, Element, Watch, State, Prop, h } from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\nimport SignatureEn from './assets/sig-blk-en.svg';\nimport SignatureFr from './assets/sig-blk-fr.svg';\nimport WordmarkEn from './assets/wmms-spl-en.svg';\nimport WordmarkFr from './assets/wmms-spl-fr.svg';\n\n@Component({\n  tag: 'gcds-signature',\n  styleUrl: 'gcds-signature.css',\n  shadow: true,\n})\nexport class GcdsSignature {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The type of graphic to render\n   */\n  @Prop({ reflect: true, mutable: true }) type: 'signature' | 'wordmark' =\n    'signature';\n\n  @Watch('type')\n  validateType(newValue: string) {\n    if (newValue != 'signature' && newValue != 'wordmark') {\n      this.type = 'signature';\n    }\n  }\n\n  /**\n   * The colour variant to render\n   */\n  @Prop({ reflect: true, mutable: true }) variant: 'colour' | 'white' =\n    'colour';\n\n  @Watch('variant')\n  validateVariant(newValue: string) {\n    if (newValue != 'colour' && newValue != 'white') {\n      this.variant = 'colour';\n    }\n  }\n\n  /**\n   * Has link to canada.ca. Only applies to signature\n   */\n  @Prop({ mutable: true }) hasLink: boolean = false;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateType;\n    this.validateVariant;\n\n    this.updateLang();\n  }\n\n  private get selectSVG() {\n    switch (this.type) {\n      case 'wordmark':\n        if (this.lang == 'en') {\n          return WordmarkEn;\n        } else {\n          return WordmarkFr;\n        }\n      case 'signature':\n      default:\n        if (this.lang == 'en') {\n          return SignatureEn;\n        } else {\n          return SignatureFr;\n        }\n    }\n  }\n\n  render() {\n    const { type, hasLink, lang, selectSVG } = this;\n\n    return (\n      <Host>\n        {hasLink && type === 'signature' ? (\n          // eslint-disable-next-line jsx-a11y/anchor-has-content\n          <a\n            class=\"gcds-signature\"\n            href={i18n[lang].link}\n            innerHTML={selectSVG}\n          ></a>\n        ) : (\n          <div class=\"gcds-signature\" innerHTML={selectSVG}></div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}